First Make Directory pythonapp
mkdir pythonapp
cd pythonapp
vi app.py
#inside app.py put this content
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run(host='0.0.0.0')

# Why you should run it at 0.0.0.0
# https://stackoverflow.com/questions/30323224/deploying-a-minimal-flask-app-in-docker-server-connection-issues

#create another file
vi requirements.txt
#put this content
flask


#finally create an dockerfile
vi dockerfile
#put this content isnide your dockerfil,
FROM python:3.8-alpine
RUN mkdir /app
ADD . /app
WORKDIR /app
RUN pip install -r requirements.txt
CMD ["python", "app.py"]


#now run the command 
docker build -t pythonapp .

#verify the image
docker image

################above container run as root privalage#############
#modifythe dockerfile so that the image will be build with a user permission and run as a user########
FROM python:3.8-alpine
RUN mkdir /app
ADD requirements.txt .
RUN pip install -r requirements.txt
USER root
ADD . /app
RUN chown -R 1001:0 /app
USER 1001
WORKDIR /app
CMD ["python", "app.py"]

#then again run the docker build -t pythonappnonroot .

#to verify the container run as non root user
FROM python:3.8
RUN mkdir /app
ADD requirements.txt .
RUN pip install -r requirements.txt
USER root
ADD . /app
RUN chown -R 1001:0 /app
USER 1001
WORKDIR /app
CMD ["python", "app.py"]


#rebuild the image 
docker build -t pythonappnonroot .
docker run -p 8080:5000 -d pythonappnonroo 
docker ps
docker exec -it containerid bash
#you can see the container is runing as non root user
